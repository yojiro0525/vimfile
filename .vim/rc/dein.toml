[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2 
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ },
        \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

[[plugins]]
repo = 'halkn/lightline-lsp'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <C-e> :NERDTreeToggle<CR>
let NERDTreeShowHidden = 1
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:webdevicons_enable_nerdtree = 1
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
let g:previm_enable_realtime = 1
let g:previm_open_cmd = '/opt/google/chrome/chrome'
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <Tab> pumvisible() ? "\<C-y>" : "\<Tab>"
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
'''
[[plugins]]
repo = 'kuroitu/pyceberg'

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
let g:molokai_original = 1
let g:rehash256 = 1
'''
